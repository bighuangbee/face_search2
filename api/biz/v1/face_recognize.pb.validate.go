// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: biz/v1/face_recognize.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptyReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyReplyMultiError, or
// nil if none found.
func (m *EmptyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyReplyMultiError(errors)
	}

	return nil
}

// EmptyReplyMultiError is an error wrapping multiple validation errors
// returned by EmptyReply.ValidateAll() if the designated constraints aren't met.
type EmptyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyReplyMultiError) AllErrors() []error { return m }

// EmptyReplyValidationError is the validation error returned by
// EmptyReply.Validate if the designated constraints aren't met.
type EmptyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyReplyValidationError) ErrorName() string { return "EmptyReplyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyReplyValidationError{}

// Validate checks the field values on EmptyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyRequestMultiError, or
// nil if none found.
func (m *EmptyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyRequestMultiError(errors)
	}

	return nil
}

// EmptyRequestMultiError is an error wrapping multiple validation errors
// returned by EmptyRequest.ValidateAll() if the designated constraints aren't met.
type EmptyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyRequestMultiError) AllErrors() []error { return m }

// EmptyRequestValidationError is the validation error returned by
// EmptyRequest.Validate if the designated constraints aren't met.
type EmptyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRequestValidationError) ErrorName() string { return "EmptyRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRequestValidationError{}

// Validate checks the field values on ImageType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageTypeMultiError, or nil
// if none found.
func (m *ImageType) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JPG

	// no validation rules for PNG

	if len(errors) > 0 {
		return ImageTypeMultiError(errors)
	}

	return nil
}

// ImageTypeMultiError is an error wrapping multiple validation errors returned
// by ImageType.ValidateAll() if the designated constraints aren't met.
type ImageTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageTypeMultiError) AllErrors() []error { return m }

// ImageTypeValidationError is the validation error returned by
// ImageType.Validate if the designated constraints aren't met.
type ImageTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageTypeValidationError) ErrorName() string { return "ImageTypeValidationError" }

// Error satisfies the builtin error interface
func (e ImageTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageTypeValidationError{}

// Validate checks the field values on Struct with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Struct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Struct with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StructMultiError, or nil if none found.
func (m *Struct) ValidateAll() error {
	return m.validate(true)
}

func (m *Struct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetImageType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StructValidationError{
					field:  "ImageType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StructValidationError{
					field:  "ImageType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StructValidationError{
				field:  "ImageType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Data

	// no validation rules for Size

	// no validation rules for Width

	// no validation rules for Height

	if len(errors) > 0 {
		return StructMultiError(errors)
	}

	return nil
}

// StructMultiError is an error wrapping multiple validation errors returned by
// Struct.ValidateAll() if the designated constraints aren't met.
type StructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StructMultiError) AllErrors() []error { return m }

// StructValidationError is the validation error returned by Struct.Validate if
// the designated constraints aren't met.
type StructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StructValidationError) ErrorName() string { return "StructValidationError" }

// Error satisfies the builtin error interface
func (e StructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StructValidationError{}

// Validate checks the field values on SearchResultReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchResultReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResultReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchResultReplyMultiError, or nil if none found.
func (m *SearchResultReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResultReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResultReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResultReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResultReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchResultReplyMultiError(errors)
	}

	return nil
}

// SearchResultReplyMultiError is an error wrapping multiple validation errors
// returned by SearchResultReply.ValidateAll() if the designated constraints
// aren't met.
type SearchResultReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResultReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResultReplyMultiError) AllErrors() []error { return m }

// SearchResultReplyValidationError is the validation error returned by
// SearchResultReply.Validate if the designated constraints aren't met.
type SearchResultReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResultReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResultReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResultReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResultReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResultReplyValidationError) ErrorName() string {
	return "SearchResultReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResultReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResultReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResultReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResultReplyValidationError{}

// Validate checks the field values on SearchResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchResultMultiError, or
// nil if none found.
func (m *SearchResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Filename

	// no validation rules for Match

	if len(errors) > 0 {
		return SearchResultMultiError(errors)
	}

	return nil
}

// SearchResultMultiError is an error wrapping multiple validation errors
// returned by SearchResult.ValidateAll() if the designated constraints aren't met.
type SearchResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResultMultiError) AllErrors() []error { return m }

// SearchResultValidationError is the validation error returned by
// SearchResult.Validate if the designated constraints aren't met.
type SearchResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResultValidationError) ErrorName() string { return "SearchResultValidationError" }

// Error satisfies the builtin error interface
func (e SearchResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResultValidationError{}
