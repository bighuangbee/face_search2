// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: biz/v1/face_recognize.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on EmptyReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EmptyReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EmptyReplyValidationError is the validation error returned by
// EmptyReply.Validate if the designated constraints aren't met.
type EmptyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyReplyValidationError) ErrorName() string { return "EmptyReplyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyReplyValidationError{}

// Validate checks the field values on EmptyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EmptyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EmptyRequestValidationError is the validation error returned by
// EmptyRequest.Validate if the designated constraints aren't met.
type EmptyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRequestValidationError) ErrorName() string { return "EmptyRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRequestValidationError{}

// Validate checks the field values on RegisteStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisteStatusReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Registering

	return nil
}

// RegisteStatusReplyValidationError is the validation error returned by
// RegisteStatusReply.Validate if the designated constraints aren't met.
type RegisteStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisteStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisteStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisteStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisteStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisteStatusReplyValidationError) ErrorName() string {
	return "RegisteStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisteStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisteStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisteStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisteStatusReplyValidationError{}

// Validate checks the field values on RegisteByPathReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisteByPathReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RegistedSuccNum

	// no validation rules for RegistedFailedNum

	// no validation rules for NewFaceNum

	return nil
}

// RegisteByPathReplyValidationError is the validation error returned by
// RegisteByPathReply.Validate if the designated constraints aren't met.
type RegisteByPathReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisteByPathReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisteByPathReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisteByPathReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisteByPathReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisteByPathReplyValidationError) ErrorName() string {
	return "RegisteByPathReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisteByPathReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisteByPathReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisteByPathReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisteByPathReplyValidationError{}

// Validate checks the field values on ImageType with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ImageType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JPG

	// no validation rules for PNG

	return nil
}

// ImageTypeValidationError is the validation error returned by
// ImageType.Validate if the designated constraints aren't met.
type ImageTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageTypeValidationError) ErrorName() string { return "ImageTypeValidationError" }

// Error satisfies the builtin error interface
func (e ImageTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageTypeValidationError{}

// Validate checks the field values on Struct with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Struct) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetImageType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StructValidationError{
				field:  "ImageType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Data

	// no validation rules for Size

	// no validation rules for Width

	// no validation rules for Height

	return nil
}

// StructValidationError is the validation error returned by Struct.Validate if
// the designated constraints aren't met.
type StructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StructValidationError) ErrorName() string { return "StructValidationError" }

// Error satisfies the builtin error interface
func (e StructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StructValidationError{}

// Validate checks the field values on SearchResultReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SearchResultReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResultReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SearchResultReplyValidationError is the validation error returned by
// SearchResultReply.Validate if the designated constraints aren't met.
type SearchResultReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResultReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResultReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResultReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResultReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResultReplyValidationError) ErrorName() string {
	return "SearchResultReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResultReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResultReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResultReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResultReplyValidationError{}

// Validate checks the field values on SearchResult with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SearchResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Filename

	// no validation rules for Match

	return nil
}

// SearchResultValidationError is the validation error returned by
// SearchResult.Validate if the designated constraints aren't met.
type SearchResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResultValidationError) ErrorName() string { return "SearchResultValidationError" }

// Error satisfies the builtin error interface
func (e SearchResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResultValidationError{}
