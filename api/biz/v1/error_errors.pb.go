// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsCarNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CarPlayerErrorReason_CAR_NOT_FOUND.String() && e.Code == 400
}

// 为某个枚举单独设置错误码
func ErrorCarNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, CarPlayerErrorReason_CAR_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsBandRepeat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CarPlayerErrorReason_BAND_REPEAT.String() && e.Code == 400
}

func ErrorBandRepeat(format string, args ...interface{}) *errors.Error {
	return errors.New(400, CarPlayerErrorReason_BAND_REPEAT.String(), fmt.Sprintf(format, args...))
}

func IsBandOtherPlayerBand(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CarPlayerErrorReason_BAND_OTHER_PLAYER_BAND.String() && e.Code == 400
}

func ErrorBandOtherPlayerBand(format string, args ...interface{}) *errors.Error {
	return errors.New(400, CarPlayerErrorReason_BAND_OTHER_PLAYER_BAND.String(), fmt.Sprintf(format, args...))
}

func IsUnbandRepeat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CarPlayerErrorReason_UNBAND_REPEAT.String() && e.Code == 400
}

func ErrorUnbandRepeat(format string, args ...interface{}) *errors.Error {
	return errors.New(400, CarPlayerErrorReason_UNBAND_REPEAT.String(), fmt.Sprintf(format, args...))
}

func IsUnbandNotBanded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CarPlayerErrorReason_UNBAND_NOT_BANDED.String() && e.Code == 400
}

func ErrorUnbandNotBanded(format string, args ...interface{}) *errors.Error {
	return errors.New(400, CarPlayerErrorReason_UNBAND_NOT_BANDED.String(), fmt.Sprintf(format, args...))
}
